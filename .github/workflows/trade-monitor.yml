name: Trade Monitor

on:
  push:
    branches: [ KIS/realtimetrade ]
  pull_request:
    branches: [ KIS/realtimetrade ]
  schedule:
    - cron: "*/5 0-6 * * 1-5"
  workflow_dispatch:

jobs:
  monitor-trade:
    runs-on: ubuntu-latest

    env:
      KIS_APP_KEY: ${{ secrets.KIS_APP_KEY }}
      KIS_APP_SECRET: ${{ secrets.KIS_APP_SECRET }}
      CANO: ${{ secrets.CANO }}
      ACNT_PRDT_CD: ${{ secrets.ACNT_PRDT_CD }}
      KIS_ENV: ${{ secrets.KIS_ENV }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Dependencies 설치
        run: pip install -r requirements.txt

      - name: 리밸런싱 API 서버 실행
        run: |
          nohup uvicorn rolling_k_auto_trade_api.main:app --host 0.0.0.0 --port 8000 > fastapi.log 2>&1 &
          echo "⏳ FastAPI 서버 구동 대기..."
          # 1단계: 포트 오픈 체크
          for i in {1..30}; do
            if curl -s http://localhost:8000/docs > /dev/null; then
              echo "✅ /docs 응답 OK"
              break
            fi
            sleep 2
          done
          # 2단계: /rebalance/latest API 준비 체크
          for i in {1..30}; do
            if curl -s http://localhost:8000/rebalance/latest | grep -q "status"; then
              echo "✅ /rebalance/latest 응답 OK"
              break
            fi
            echo "서버 준비중... ($i)"
            sleep 2
          done

      - name: trader 자동매매 실행 (API 재시도 포함)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          MAX_RETRIES=5
          RETRY_DELAY=5
          for i in $(seq 1 $MAX_RETRIES); do
            echo "▶ trader.trader 실행 시도 $i/$MAX_RETRIES"
            if python -m trader.trader; then
              echo "✅ trader.trader 실행 성공"
              break
            else
              echo "⚠️ trader.trader 실행 실패, ${RETRY_DELAY}초 후 재시도..."
              sleep $RETRY_DELAY
            fi
            if [ "$i" -eq "$MAX_RETRIES" ]; then
              echo "❌ trader.trader 실행 실패 (모든 재시도 소진)"
              exit 1
            fi
          done

      - name: CEO 리포트 자동 생성
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: python -m trader.report_ceo

      - name: CEO 리포트 artifact 업로드
        uses: actions/upload-artifact@v4
        with:
          name: ceo-report
          path: reports/

      - name: FastAPI 로그 출력
        if: always()
        run: |
          echo "::group::FastAPI Server Log"
          cat fastapi.log
          echo "::endgroup::"

      - name: FastAPI 로그 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fastapi-log
          path: fastapi.log

