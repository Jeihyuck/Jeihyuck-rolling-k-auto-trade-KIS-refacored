name: RKMax Live (Unified Trade Monitor)

on:
  push:
    branches: [ rkmax-week ]
  pull_request:
    branches: [ rkmax-week ]
  schedule:
    # KST 09:00에 1회 (UTC 00:00)
    - cron: '0 0 * * 1-5'
  workflow_dispatch:

jobs:
  monitor-trade:
    runs-on: ubuntu-latest
    concurrency:
      group: rkmax-live
      cancel-in-progress: true
    timeout-minutes: 420

    env:
      TZ: Asia/Seoul
      # ===== 민감정보(Secrets) =====
      KIS_APP_KEY: ${{ secrets.KIS_APP_KEY }}
      KIS_APP_SECRET: ${{ secrets.KIS_APP_SECRET }}
      CANO: ${{ secrets.CANO }}
      ACNT_PRDT_CD: ${{ secrets.ACNT_PRDT_CD }}
      KIS_ENV: ${{ secrets.KIS_ENV }}

      # ===== 전략/운영 (동일성 유지) =====
      PARTIAL1: "0.5"
      PARTIAL2: "0.3"
      TRAIL_PCT: "0.007"
      FAST_STOP: "0.01"
      ATR_STOP_MULT: "1.5"
      TIME_STOP_HHMM: "13:00"
      SELL_FORCE_TIME: "14:45"

      MIN_TRADES: "5"
      MAX_MDD_PCT: "30"
      MIN_WINRATE: "50"
      MIN_CUMRET: "2"
      TOP_K_LIMIT: "20"
      MIN_TARGET_RET_M_PCT: "8"
      K_MIN: "0.1"
      K_MAX: "0.9"
      K_STEP: "0.1"
      TOTAL_CAPITAL: "10000000"
      MIN_QTY_PER_TICKET: "1"
      DAILY_CAPITAL: "10000000"
      MAX_POSITIONS: "8"
      CAPITAL_PER_SYMBOL: "100000"
      ALLOW_AFTER_HOURS: "0"
      ORDER_THROTTLE_SEC: "0.3"
      REBALANCE_OUT_DIR: "rebalance_results"
      REBALANCE_DAYS: "7"

      # === 신규/조정 파라미터 ===
      SLIPPAGE_ENTER_GUARD_PCT: "1.5"
      TRAIL_DISABLE_MINUTES: "5"
      SUSPICIOUS_LOG: "trader/suspicious_targets.log"
      LOG_LEVEL: "INFO"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Dependencies 설치
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Runtime / Version info
        run: |
          echo "=== ENV DUMP ==="
          printenv | sort
          echo "=== PYTHON ==="
          python -c "import sys; print(sys.executable, sys.version)"
          echo "=== GIT SHA ==="
          git rev-parse --short HEAD || true

      - name: Create inline strategy config (configs/rkmax-live.yaml)
        run: |
          mkdir -p configs
          cat > configs/rkmax-live.yaml <<-YAML
          mode: daytrade
          universe: KOSDAQ_TOP50
          k_params:
            method: rkmax
            lookback_months: 1
          slippage:
            max_pct: 0.0025
            max_extra_ticks: 2
          take_profit:
            tp1_pct: 0.008
            tp2_pct: 0.015
          trailing:
            pct: 0.007
            disable_minutes: ${TRAIL_DISABLE_MINUTES}
          stops:
            fast_stop_pct: 0.01
            atr_mult: 1.5
          sizing:
            scheme: equal
            clip_min: 0.5
            clip_max: 1.5
          time_rules:
            trade_start_hhmm: "09:00"
            trade_end_hhmm:   "14:45"
            sell_force_window:
              start_hhmm: "14:40"
              end_hhmm:   "14:45"
          swing:
            enabled: false
            hold_days: 3
            adx_min: 20
            use_tema_filter: true
          retries:
            max_attempts: 5
            backoff_base_sec: 0.5
          logging:
            level: INFO
            json: true
          YAML

          echo "=== configs/rkmax-live.yaml ==="
          cat configs/rkmax-live.yaml

      - name: 리밸런싱 API 서버 실행 (백그라운드)
        run: |
          echo "[API] Starting FastAPI (nohup) ..."
          nohup uvicorn rolling_k_auto_trade_api.main:app \
            --host 0.0.0.0 --port 8000 > fastapi.log 2>&1 &
          echo "[API] FastAPI started: PID=$!"
          sleep 5
          echo "=== fastapi.log (tail 50) ==="
          tail -n 50 fastapi.log || true

      - name: Preflight (KST open window)
        id: preflight
        run: |
          DOW=$(date +%u)         # 1=Mon ... 7=Sun
          NOW=$(date +%H:%M)
          CONTINUE=true
          if [ "$DOW" -ge 6 ]; then CONTINUE=false; fi
          if [[ "$NOW" < "09:00" || "$NOW" > "14:45" ]]; then CONTINUE=false; fi
          echo "continue=${CONTINUE}" >> "$GITHUB_OUTPUT"
          echo "[PREFLIGHT] DOW=$DOW NOW=$NOW CONTINUE=$CONTINUE"

      # (선택) 리밸런싱 산출을 API 없이 파일로 미리 생성하고 싶다면, 아래 주석을 프로젝트 CLI에 맞게 켜서 사용
      # - name: Generate rebalance JSON (optional)
      #   if: steps.preflight.outputs.continue == 'true'
      #   env:
      #     PYTHONPATH: ${{ github.workspace }}
      #   run: |
      #     python -m yourproject.rebalance_cli --date "$(date +%F)" --out-dir "${REBALANCE_OUT_DIR}" || echo "[WARN] rebalance CLI failed"

      - name: Unified live loop (09:00→14:45 KST)
        if: steps.preflight.outputs.continue == 'true'
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -e
          echo "[INIT] $(date '+%F %T %Z') — start unified live loop"
          while true; do
            NOW=$(date +%H:%M)
            if [[ "$NOW" < "09:00" ]]; then
              echo "[WAIT] $NOW < 09:00 — sleep 30s"; sleep 30; continue
            fi
            if [[ "$NOW" > "14:45" || "$NOW" == "14:45" ]]; then
              echo "[FORCE-SELL] $NOW — python -m trader.trader --force-sell"
              python -m trader.trader --force-sell || true
              break
            fi
            echo "[TICK] $(date '+%T') — python -m trader.trader (regular)"
            python -m trader.trader || true
            sleep 60
          done
          echo "[DONE] $(date '+%F %T %Z') — loop ended"

      - name: CEO 리포트 자동 생성
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -m trader.report_ceo || true

      - name: CEO 리포트 artifact 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ceo-report
          path: trader/reports/
          if-no-files-found: warn
          retention-days: 30

      - name: Rebalance JSON artifact 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rebalance-results
          path: rebalance_results/*.json
          if-no-files-found: warn
          retention-days: 60

      - name: Trades & suspicious logs 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trade-logs
          path: |
            trader/logs/*.json
            logs/*.json
            trader/suspicious_targets.log
            fills/*.csv
          if-no-files-found: warn
          retention-days: 14

      - name: FastAPI 로그 출력 (cat)
        if: always()
        run: |
          echo "::group::FastAPI Server Log"
          cat fastapi.log || true
          echo "::endgroup::"

      - name: FastAPI 로그 업로드 (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fastapi-log
          path: fastapi.log
          if-no-files-found: ignore
          retention-days: 14
