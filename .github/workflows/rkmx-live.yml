name: RKMax Live (Unified Trade Monitor)

on:
  workflow_dispatch:
  push:
    branches: [ rkmax-week ]
  schedule:
    # 평일 08:50 KST (23:50 UTC, Sun-Thu)
    - cron: "50 23 * * 0-4"

jobs:
  monitor-trade:
    name: Monitor & Rebalance
    runs-on: ubuntu-latest

    # Environments를 쓰는 경우에만 유지 (prod에 시크릿 저장되어 있어야 함)
    environment: prod

    env:
      TZ: Asia/Seoul

      # KIS / Account secrets (원본/별칭 모두 주입)
      KIS_APP_KEY:      ${{ secrets.KIS_APP_KEY }}
      APP_KEY:          ${{ secrets.KIS_APP_KEY }}
      KIS_APP_SECRET:   ${{ secrets.KIS_APP_SECRET }}
      APP_SECRET:       ${{ secrets.KIS_APP_SECRET }}

      CANO:             ${{ secrets.KIS_CANO }}
      KIS_CANO:         ${{ secrets.KIS_CANO }}
      ACNT_PRDT_CD:     ${{ secrets.KIS_ACNT_PRDT_CD }}
      KIS_ACNT_PRDT_CD: ${{ secrets.KIS_ACNT_PRDT_CD }}

      # practice or real
      KIS_ENV:          ${{ secrets.KIS_ENV }}

      # Strategy params
      PARTIAL1: "0.5"
      PARTIAL2: "0.3"
      TRAIL_PCT: "0.007"
      FAST_STOP: "0.01"
      ATR_STOP_MULT: "1.5"
      TIME_STOP_HHMM: "13:00"
      SELL_FORCE_TIME: "14:45"
      MIN_TRADES: "5"
      MAX_MDD_PCT: "30"
      MIN_WINRATE: "50"
      MIN_CUMRET: "2"
      TOP_K_LIMIT: "20"
      MIN_TARGET_RET_M_PCT: "8"
      K_MIN: "0.1"
      K_MAX: "0.9"
      K_STEP: "0.1"
      TOTAL_CAPITAL: "10000000"
      MIN_QTY_PER_TICKET: "1"
      DAILY_CAPITAL: "10000000"
      MAX_POSITIONS: "8"
      CAPITAL_PER_SYMBOL: "100000"
      ALLOW_AFTER_HOURS: "0"
      ORDER_THROTTLE_SEC: "0.3"
      REBALANCE_DAYS: "7"
      REBALANCE_OUT_DIR: "rebalance_results"
      SLIPPAGE_ENTER_GUARD_PCT: "1.5"
      TRAIL_DISABLE_MINUTES: "5"
      SUSPICIOUS_LOG: "trader/suspicious_targets.log"
      LOG_LEVEL: "INFO"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Check required secrets presence
        run: |
          set -e
          echo "KIS_APP_KEY:    $([[ -n "$KIS_APP_KEY" ]] && echo SET || echo EMPTY)"
          echo "KIS_APP_SECRET: $([[ -n "$KIS_APP_SECRET" ]] && echo SET || echo EMPTY)"
          echo "CANO:           $([[ -n "$CANO" ]] && echo SET || echo EMPTY)"
          echo "ACNT_PRDT_CD:   $([[ -n "$ACNT_PRDT_CD" ]] && echo SET || echo EMPTY)"
          echo "KIS_ENV:        $([[ -n "$KIS_ENV" ]] && echo SET || echo EMPTY)"

      - name: Install deps
        run: |
          set -e
          python -V
          pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Write runtime config
        run: |
          set -e
          mkdir -p configs
          cat > configs/rkmax-live.yaml <<'YAML'
          mode: daytrade
          universe: KOSDAQ_TOP50
          k_params:
            method: rkmax
            lookback_months: 1
          slippage:
            max_pct: 0.0025
            max_extra_ticks: 2
          take_profit:
            tp1_pct: 0.008
            tp2_pct: 0.015
          trailing:
            pct: 0.007
            disable_minutes: ${TRAIL_DISABLE_MINUTES}
          stops:
            fast_stop_pct: ${FAST_STOP}
            atr_mult: ${ATR_STOP_MULT}
          sizing:
            scheme: equal
            clip_min: 0.5
            clip_max: 1.5
          time_rules:
            trade_start_hhmm: "09:00"
            trade_end_hhmm:   "14:45"
            sell_force_window:
              start_hhmm: "14:40"
              end_hhmm:   "14:45"
          swing:
            enabled: false
            hold_days: 3
            adx_min: 20
            use_tema_filter: true
          retries:
            max_attempts: 5
            backoff_base_sec: 0.5
          logging:
            level: ${LOG_LEVEL}
            json: true
          YAML
          echo "=== configs/rkmax-live.yaml ==="
          sed -n '1,200p' configs/rkmax-live.yaml

      - name: Start FastAPI (nohup) with robust target discovery
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -e
          echo "[API] Discovering FastAPI app module..."
          CANDIDATES=("rolling_k_auto_trade_api.main:app" "rolling_k_auto_trade_api.api:app" "trader.api:app" "api:app" "main:app")

          TARGET=""
          for C in "${CANDIDATES[@]}"; do
            if python -c 'import importlib,sys; t=sys.argv[1]; mod,app=t.split(":"); m=importlib.import_module(mod); getattr(m,app)' "$C"; then
              TARGET="$C"
              break
            fi
          done

          if [ -z "$TARGET" ]; then
            echo "[API][FATAL] FastAPI app not found in: ${CANDIDATES[*]}"
            echo "[API][HINT] Ensure one of these exists and exports `app`: ${CANDIDATES[*]}"
            exit 1
          fi

          echo "[API] Starting FastAPI target=${TARGET} ..."
          nohup uvicorn "$TARGET" --host 127.0.0.1 --port 8000 > fastapi.log 2>&1 &

          # readiness wait
          for i in $(seq 1 40); do
            sleep 1
            CODE=$(curl -sS -o /dev/null -w '%{http_code}' http://127.0.0.1:8000/docs || echo 000)
            if [ "$CODE" = "200" ] || [ "$CODE" = "401" ]; then
              echo "[API] Ready after ${i}s (http ${CODE})"
              break
            fi
            if [ "$i" -eq 40 ]; then
              echo "[API][WARN] not ready within timeout — showing log and continuing"
            fi
          done

          echo "=== fastapi.log (tail 120) ==="
          tail -n 120 fastapi.log || true

      - name: Rebalance - Generate (always)
        if: ${{ always() }}
        run: |
          set -e
          DATE=$(date '+%F')
          echo "[REB] try POST /rebalance/generate?date=${DATE}"
          curl -sS -X POST "http://127.0.0.1:8000/rebalance/generate?date=${DATE}" \
               -H "Content-Type: application/json" \
               -d '{}' || echo "[REB] endpoint not found or failed (ignored)."

      - name: Rebalance - Verify & Save (always)
        if: ${{ always() }}
        run: |
          set -e
          DATE=$(date '+%F')
          mkdir -p "${REBALANCE_OUT_DIR}"
          echo "[REB] check /rebalance/selected/${DATE}"
          RES=$(curl -sS "http://127.0.0.1:8000/rebalance/selected/${DATE}" || echo '{}')
          echo "${RES}" > "${REBALANCE_OUT_DIR}/selected-${DATE}.json"
          COUNT=$(jq -r '(.selected_stocks // .data.selected_stocks // []) | length' "${REBALANCE_OUT_DIR}/selected-${DATE}.json" 2>/dev/null || echo 0)
          echo "[REB] selected_stocks count: ${COUNT}"
          if [ "${COUNT}" -eq 0 ]; then
            echo "[REB][WARN] no selected_stocks (weekend/after-hours or empty generator output)"
          fi

      - id: preflight
        name: Preflight guard for live loop
        run: |
          set -e
          DOW=$(date +%u)   # 1=Mon ... 7=Sun
          NOW=$(date +%H:%M)
          CONTINUE=true
          if [ "$DOW" -ge 6 ]; then CONTINUE=false; fi
          if [[ "$NOW" < "09:00" || "$NOW" > "14:45" ]]; then CONTINUE=false; fi
          echo "continue=${CONTINUE}" >> "$GITHUB_OUTPUT"
          echo "[PREFLIGHT] DOW=$DOW NOW=$NOW CONTINUE=$CONTINUE"

      - name: Unified live loop (09:00->14:45 KST)
        if: ${{ steps.preflight.outputs.continue == 'true' }}
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -e
          echo "[INIT] $(date '+%F %T %Z') — start unified live loop"
          python -m trader.trader || true
          echo "[DONE] $(date '+%F %T %Z') — loop ended"

      - name: CEO Report
        if: ${{ always() }}
        run: |
          set -e
          python -m trader.report_ceo || true

      - name: Upload Rebalance Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: rebalance-results
          path: rebalance_results/*.json
          if-no-files-found: warn

      - name: Upload Logs (optional)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-and-fills
          path: |
            trader/logs/*.json
            logs/*.json
            trader/suspicious_targets.log
            fills/*.csv
          if-no-files-found: warn

      - name: Show FastAPI log tail
        if: ${{ always() }}
        run: |
          echo "::group::FastAPI Server Log"
          tail -n 200 fastapi.log || true
          echo "::endgroup::"

